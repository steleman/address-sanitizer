#summary How to build and run AddressSanitizer on Android

== Android platform workflow ==

AddressSanitizer is fully supported in AOSP starting with JellyBean release. To run applications built with ASan you'll need an -eng build of Android.

To build any part of Android system with ASan, add LOCAL_ADDRESS_SANITIZER:=true to the appropriate Android.mk.

Running:
 * To run a standalone native binary, prefix it with asanwrapper: `/system/bin/asanwrapper _path_to_your_binary_ _options_`
 * To run an app from an APK, do `setprop wrap._name_ "logwrapper asanwrapper"` , where _name_ is the name of your app as seen in "adb shell ps"

NOTE: if you get an assertion failure about INTERCEPT(something), this means ASan interceptors have not kicked in. Verify that you are running the program with asanwrapper.


== Android NDK workflow ==

Grab Android SDK and NDK from the internet.

Then do one of the following:
  * (make build) Read http://src.chromium.org/viewvc/chrome/trunk/src/tools/clang/scripts/update.sh?revision=HEAD&view=markup and do the same (search for "android"). 
  * (cmake build) Read https://code.google.com/p/address-sanitizer/source/browse/trunk/build/scripts/slave/buildbot_cmake.sh and do the same (search for "ANDROID"). 

Either of the above will get you Clang with arm-android ASan runtime library. Cmake build (the second bullet) will also build ASan tests for Android.

Find the GCC-based ARM toolchain in `<ndk>/toolchains/arm-linux-androideabi-4.4.3`, and copy Clang build over it:
{{{
cp Release+Asserts/bin/clang $TOOLCHAIN/prebuilt/linux-x86/bin/
cp -r Release+Asserts/lib/clang $TOOLCHAIN/prebuilt/linux-x86/lib/
ln -sf clang $TOOLCHAIN/prebuilt/linux-x86/bin/arm-linux-androideabi-gcc
ln -sf clang $TOOLCHAIN/prebuilt/linux-x86/bin/arm-linux-androideabi-g++
}}}

And that's all! Now ndk-build will use Clang for "armeabi" and
"armeabi-v7a" platforms.

It is also possible to do this without copying Clang with a set of --sysroot and -B flags.

If you choose to keep the original toolchain, ndk-build has a handy
switch NDK_TOOLCHAIN= (ex., NDK_TOOLCHAIN=arm-linux-androideabi-4.4.3)
to pick one or the other.

With Clang-based toolchain, add the following to your Android.mk to enable ASan:
{{{
LOCAL_CFLAGS += -fsanitize=address
LOCAL_LDFLAGS += -fsanitize=address
}}}


== Running NDK applications with ASan ==

Copy libclang_rt.asan-arm-android.so (in Clang library directory) somewhere on the device.

Preload it into Dalvik VM.

`adb shell setprop wrap._name_ _wrapper_` will spawn a new Dalvik process (fork+exec) for any instance of a given application, with `_wrapper_` prepended to the command line. System properties on Android are limited in length, so write a script like
{{{
ASAN_OPTIONS=debug=1,verbosity=1 \
LD_LIBRARY_PATH=/data/local/tmp/asan:$LD_LIBRARY_PATH \
LD_PRELOAD=libclang_rt.asan-arm-android.so \
exec $@
}}}
, push it on device beside the runtime library and run `adb shell setprop wrap._name_ /data/local/tmp/asan/asanwrapper.sh`. Then start your program as usual. Reports will be printed to `adb logcat` (you may need to add `logwrapper` to the `setprop` line for that to happen).