#summary LeakSanitizer: heap leak detection on top of ASan

= Introduction =

LeakSanitizer is a memory leak detector which is integrated into AddressSanitizer. It detects heap leaks, i.e. allocated memory that has become unreachable. The tool is supported on x86_64 Linux.

LeakSanitizer is present in all ASan builds, and can be enabled by passing a run-time option to ASan. Doing so does not introduce any additional slowdown compared to a plain ASan run. LSan lies dormant until the very end of the process, at which point there is an extra leak detection phase. In performance-critical scenarios, LSan can also be used without ASan instrumentation.

See also: LeakSanitizerDesignDocument, LeakSanitizerVsHeapChecker

= Using LeakSanitizer =

To use LSan, build your program with AddressSanitizer:

{{{
$ cat memory-leak.c 
#include <stdlib.h>

void *p;

int main() {
  p = malloc(7);
  p = 0;
  return 0;
}
$ clang -fsanitize=address -g memory-leak.c
}}}

Now run with ASAN_OPTIONS="detect_leaks=1". (Optionally, pass a symbolizer path to get nice stack traces.)
{{{
$ export ASAN_SYMBOLIZER_PATH=$LLVM_BIN/llvm-symbolizer
$ ASAN_OPTIONS="detect_leaks=1" ./a.out 

=================================================================
==7829==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 7 byte(s) in 1 object(s) allocated from:
    #0 0x42c0c5 in __interceptor_malloc /usr/home/hacker/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:74
    #1 0x43ef81 in main /usr/home/hacker/memory-leak.c:6
    #2 0x7fef044b876c in __libc_start_main /build/buildd/eglibc-2.15/csu/libc-start.c:226

SUMMARY: LeakSanitizer: 7 byte(s) leaked in 1 allocation(s).
}}}