#summary The status of the Windows ASan port

==Short summary==
Pure C apps seem to work fine, except for the stacks missing file/lineno in the reports (see [http://llvm.org/bugs/show_bug.cgi?id=12283 bug] - only function+offset info is available).

The ASan runtime library builds using MSVC `cl` just fine.

One has to use MSVC's `link` to link the Clang-generated `.o` files and the runtime.

C++ support is blocked by the unfinished clang++/Win implementation.

Most likely it's possible to mix `cl`-built non-instrumented C++ code with `clang`-built instrumented C code.

=Try it=
_For up-to-date instructions, see the [http://code.google.com/p/address-sanitizer/source/browse/trunk/build/scripts/slave/buildbot_standard.bat build steps] our internal buildbot is performing to test._

First, you’ll need to have Clang built:
{{{
set REV=-r HEAD
:: Replace “HEAD” with a revision number if you want

svn co %REV% http://llvm.org/svn/llvm-project/llvm/trunk llvm
cd llvm
svn co %REV% http://llvm.org/svn/llvm-project/cfe/trunk tools/clang
svn co %REV% http://llvm.org/svn/llvm-project/compiler-rt/trunk/lib/asan asan_rtl
mkdir BUILD
cd BUILD 
cmake .. && devenv LLVM.sln /Build Release/Project clang
cd ..
}}}

Now, build the runtime library:
{{{
cd asan_rtl
cl /nologo /MP /MT /Zi /c *.cc interception/*.cc
lib /nologo /out:asan_rtl.lib *.obj
cd ..
}}}

Try to build your app with Clang:
{{{
path-to-checkout\llvm\BUIlD\bin\Release\clang.exe -faddress-sanitizer -g -c <your_files>
link /debug /incremental:no /out:myprogname.exe /nologo <your_obj_files> path-to-checkout\asan_rt\asan_rtl.lib
myprogname.exe
}}}

== Known problems ==
See the corresponding [http://code.google.com/p/address-sanitizer/issues/list?q=label:OpSys-Windows issue tracker label].

== SPEC CPU2006 results ==
We’ve run ASan/Win on SPEC tests.
It has shown the very same slowdown as the Linux version (see [http://code.google.com/p/address-sanitizer/wiki/PerformanceNumbers here]) on the C tests.

The C++ tests were not run.

ASan has found the same UAF in perlbench and stack OOB on h264ref [http://code.google.com/p/address-sanitizer/wiki/FoundBugs seen on Linux].

The global OOB on h264ref was not detected - since this feature is not implemented yet on Windows.<br/>However, it has found one similar heap-OOB access on h264ref which needs to be investigated. See issue 50 for the details.

== Chromium ==
The plan is to try Chromium tests with runtime but no instrumentation first,
then add instrumentation of C code, then ...

Stay tuned!