#summary Build Instructions for AddressSanitizer

*Warning*: we are in the process of integrating AddressSanitizer with [http://llvm.org LLVM].
These temporary build instructions may or may not work.
If you need something stable come back later, or grab the prebuilt binaries (see AddressSanitizer page)

==Checkout AddressSanitizer sources==
{{{
# cd somewhere
# Get llvm, clang and compiler-rt
svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
cd llvm
R=$(svn info | grep Revision: | awk '{print $2}')
(cd tools && svn co -r $R http://llvm.org/svn/llvm-project/cfe/trunk clang)
(cd projects && svn co -r $R http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt)
}}}

To switch your checkout to read-write mode:
{{{
CNAME=your_name_here
cd llvm
svn switch --relocate http://llvm.org/svn/llvm-project/llvm/trunk https://$CNAME@llvm.org/svn/llvm-project/llvm/trunk
(cd tools && svn switch --relocate http://llvm.org/svn/llvm-project/cfe/trunk https://$CNAME@llvm.org/svn/llvm-project/cfe/trunk clang)
(cd projects && svn switch --relocate http://llvm.org/svn/llvm-project/compiler-rt/trunk https://$CNAME@llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt)
}}}


==Building AddressSanitizer with configure+make==
{{{
cd /path/to/llvm
mkdir build
(cd build && ../configure --enable-optimized && make -j 10)
}}}
Note that building and running ASan tests is supported in CMake build
only (see instructions below).

To build Clang/LLVM using AddressSanitizer (bootstrap)
{{{
# Build fresh clang with AddressSanitizer as explained above
LLVM=/path/to/llvm/
CLANG="$LLVM/build/Release+Asserts/bin/clang"
CC="$CLANG -fsanitize=address" CXX="$CLANG++ -fsanitize=address  " $LLVM/configure --enable-optimized
make -j10 TOOL_NO_EXPORTS= HAVE_LINK_VERSION_SCRIPT=0
}}}

To update an existing checkout:
{{{
cd llvm/build
make update
}}}

*Note*: if you're hacking the runtime library, you'll need to run:
{{{
(cd build && make -j 10)
}}}
to rebuild it. Just running `make` in the `asan` subdirectory does not work.

==Building AddressSanitizer with CMake (LLVM 3.2 or later) ==
  * Download and install [http://www.cmake.org/cmake/resources/software.html CMake] (you'll need at least CMake 2.8.8).
  * Get llvm, clang and compiler-rt sources (see above).
  * Set configuration and build LLVM.
{{{
mkdir llvm_cmake_build && cd llvm_cmake_build
export LLVM_CHECKOUT=
# Choose CMAKE_BUILD_TYPE {Debug, Release}
# Choose LLVM_ENABLE_ASSERTIONS {ON,OFF}
# Choose the host compiler
CC=gcc CXX=g++ cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON /path/to/llvm/checkout
}}}
  * Now you can build and test LLVM code:
{{{
make -j12 # build everything
make check-all -j12 # build and run all tests (llvm+clang+ASan)
make check-sanitizer -j12 # build and run sanitizer_common tests
make check-asan -j12 # build and run ASan unit and output tests
}}}
  To build only ASan runtime library:
{{{
# On Linux:
make -j12 clang_rt.asan-x86_64
make -j12 clang_rt.asan-i386
# On Mac:
make -j12 clang_rt.asan_osx
make -j12 clang_rt.asan_osx_dynamic # optional
# The runtime libraries are built at:
# llvm_cmake_build/lib/clang/3.3/lib/{linux,darwin}/
}}}
  To build/run only ASan unit tests:
{{{
make -j12 AsanUnitTests
cd projects/compiler-rt/lib/asan/tests
./Release/Asan-x86_64-Test  # or ./Debug/Asan-x86_64-Test
./Release/Asan-i386-Test    # or ./Debug/Asan-i386-Test
}}}

  To re-run a single ASan lit-style output test make sure you've built Clang and run:
{{{
# Make sure clang and llvm tools are in your PATH.
export PATH="/path/to/llvm_cmake_build/bin:$PATH"
# Run a specific output test.
llvm-lit /path/to/llvm/checkout/projects/compiler-rt/lib/asan/lit_tests/deep_tail_call.cc
}}}
  * Visit [http://llvm.org/docs/CMake.html LLVM CMake guide] to see the ways you can customize your LLVM/Clang/ASan build. For example, you can build LLVM/Clang with ASan-ified Clang:
{{{
mkdir llvm_cmake_build_asan
cd llvm_cmake_build_asan
export CC=clang
export CXX=clang++

cmake -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_C_FLAGS="-fno-omit-frame-pointer -gline-tables-only -fsanitize=address" \
      -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -gline-tables-only -fsanitize=address" \
   /path/to/llvm/checkout
}}}

==Ninja==
If you want to get even faster incremental builds, use ninja: http://clang.llvm.org/docs/HowToSetupToolingForLLVM.html