#summary Build Instructions for AddressSanitizer

*Warning*: we are in the process of integrating AddressSanitizer with [http://llvm.org LLVM].
These temporary build instructions may or may not work.
If you need something stable come back later, or grab the prebuilt binaries (see AddressSanitizer page)

{{{
# cd somewhere
# Get llvm, clang and compiler-rt, build it all
svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
cd llvm
R=$(svn info | grep Revision: | awk '{print $2}')
(cd tools && svn co -r $R http://llvm.org/svn/llvm-project/cfe/trunk clang)
(cd projects && svn co -r $R http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt)

mkdir build
(cd build && ../configure --enable-optimized && make -j 10)
}}}

Build AddressSanitizer tests:
{{{
cd projects/compiler-rt/lib/asan/
make -f Makefile.old get_third_party
make -f Makefile.old test -j 10
# Install clang and asan run-time into a separate directory ../asan_clang_linux
make -f Makefile.old install
}}}

To build Clang/LLVM using AddressSanitizer (bootstrap)
{{{
# Build fresh clang with AddressSanitizer as explained above
LLVM=/path/to/llvm/;
CLANG="$LLVM/build/Release+Asserts/bin/clang";
CC="$CLANG -faddress-sanitizer" CXX="$CLANG++ -faddress-sanitizer  " $LLVM/configure --enable-optimized
make -j10 TOOL_NO_EXPORTS=
}}}


To update an existing checkout:
{{{
cd llvm/build
make update
}}}

*Note*: if you're hacking the runtime library, you'll need to run:
{{{
(cd build && make -j 10)
}}}
to rebuild it. Just running `make` in the `asan` subdirectory does not work.

To switch your checkout to read-write mode:
{{{
CNAME=your_name_here
cd llvm
svn switch --relocate http://llvm.org/svn/llvm-project/llvm/trunk https://$CNAME@llvm.org/svn/llvm-project/llvm/trunk
(cd tools && svn switch --relocate http://llvm.org/svn/llvm-project/cfe/trunk https://$CNAME@llvm.org/svn/llvm-project/cfe/trunk clang)
(cd projects && svn switch --relocate http://llvm.org/svn/llvm-project/compiler-rt/trunk https://$CNAME@llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt)
}}}

==Building AddressSanitizer with CMake==
  # Download and install [http://www.cmake.org/cmake/resources/software.html CMake] (you'll need the latest version - CMake 2.8.8).
  # Checkout llvm, clang and compiler-rt
{{{
# Get llvm, clang and compiler-rt, build it all
svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
cd llvm
R=$(svn info | grep Revision: | awk '{print $2}')
(cd tools && svn co -r $R http://llvm.org/svn/llvm-project/cfe/trunk clang)
(cd projects && svn co -r $R http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt)
}}}
  # Apply the following patch
{{{
--- projects/CMakeLists.txt	(revision 160622)
+++ projects/CMakeLists.txt	(working copy)
@@ -4,8 +4,7 @@
 file(GLOB entries *)
 foreach(entry ${entries})
   if(IS_DIRECTORY ${entry} AND EXISTS ${entry}/CMakeLists.txt)
-    if((NOT ${entry} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR}/compiler-rt) AND
-       (NOT ${entry} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR}/libcxx))
+    if(NOT ${entry} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR}/libcxx)
       add_subdirectory(${entry})
     endif()
   endif()
}}}
  # Set configuration and build LLVM.
{{{
mkdir llvm_cmake_build
cd llvm_cmake_build
export LLVM_CHECKOUT=/path/to/llvm/checkout
# Choose build type from {Debug, Release},
# and build 32-bit LLVM libs if you want to test 32-bit ASan runtime.
export CMAKE_DEFINES="-DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_32_BITS=ON"
# Set host compilers.
export CC=/usr/bin/gcc
export CXX=/usr/bin/g++
cmake $CMAKE_DEFINES $LLVM_CHECKOUT
}}}
  # Run ASan unit tests
{{{
cd projects/compiler-rt/lib/asan/tests
./Release/AsanTest  # or ./Debug/AsanTest
}}}
  # Output tests are not supported for now.