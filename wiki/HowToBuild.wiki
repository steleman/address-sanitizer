#summary Build Instructions for AddressSanitizer

*Warning*: we are in the process of integrating AddressSanitizer with [http://llvm.org LLVM].
These temporary build instructions may or may not work.
If you need something stable come back later, or grab the prebuilt binaries (see AddressSanitizer page)

{{{
# cd somewhere
# Get llvm, clang and compiler-rt, build it all
svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
cd llvm
R=$(svn info | grep Revision: | awk '{print $2}')
(cd tools && svn co -r $R http://llvm.org/svn/llvm-project/cfe/trunk clang)
(cd projects && svn co -r $R http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt)

mkdir build
(cd build && ../configure --enable-optimized && make -j 10)
}}}

Build AddressSanitizer tests:
{{{
cd projects/compiler-rt/lib/asan/
make -f Makefile.old get_third_party
make -f Makefile.old test -j 10
# Install clang and asan run-time into a separate directory ../asan_clang_linux
make -f Makefile.old install
}}}

To build Clang/LLVM using AddressSanitizer (bootstrap)
{{{
# Build fresh clang with AddressSanitizer as explained above
LLVM=/path/to/llvm/;
CLANG="$LLVM/build/Release+Asserts/bin/clang";
CC="$CLANG -faddress-sanitizer" CXX="$CLANG++ -faddress-sanitizer  " $LLVM/configure --enable-optimized
make -j10 TOOL_NO_EXPORTS=
}}}


To update an existing checkout:
{{{
cd llvm/build
make update
}}}

*Note*: if you're hacking the runtime library, you'll need to run:
{{{
(cd build && make -j 10)
}}}
to rebuild it. Just running `make` in the `asan` subdirectory does not work.

To switch your checkout to read-write mode:
{{{
CNAME=your_name_here
cd llvm
svn switch --relocate http://llvm.org/svn/llvm-project/llvm/trunk https://$CNAME@llvm.org/svn/llvm-project/llvm/trunk
(cd tools && svn switch --relocate http://llvm.org/svn/llvm-project/cfe/trunk https://$CNAME@llvm.org/svn/llvm-project/cfe/trunk clang)
(cd projects && svn switch --relocate http://llvm.org/svn/llvm-project/compiler-rt/trunk https://$CNAME@llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt)
}}}

==Building AddressSanitizer with CMake==
  * Download and install [http://www.cmake.org/cmake/resources/software.html CMake] (you'll need at least CMake 2.8.8).
  * Get llvm, clang and compiler-rt, build it all
{{{
svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
cd llvm
R=$(svn info | grep Revision: | awk '{print $2}')
(cd tools && svn co -r $R http://llvm.org/svn/llvm-project/cfe/trunk clang)
(cd projects && svn co -r $R http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt)
}}}
  * Set configuration and build LLVM.
{{{
mkdir llvm_cmake_build
cd llvm_cmake_build
export LLVM_CHECKOUT=/path/to/llvm/checkout
# Choose build type from {Debug, Release}.
# You may also add "-DLLVM_BUILD_32_BITS=ON" if you want to build Clang in 32-bit mode.
export CMAKE_DEFINES="-DCMAKE_BUILD_TYPE=Release"
# Setup host compilers.
export CC=/usr/bin/gcc
export CXX=/usr/bin/g++
cmake $CMAKE_DEFINES $LLVM_CHECKOUT
}}}
  * Now you can build and test LLVM code:
{{{
make -j12 # build everything
make check-all -j12 # build and run all tests (llvm+clang+ASan)
make check-asan -j12 # build and run ASan unit and output tests
}}}
  To build/run only ASan unit tests:
{{{
cd projects/compiler-rt/lib/asan/tests
make -j12 AsanUnitTests
./Release/AsanTest  # or ./Debug/AsanTest
}}}
  To re-run a single ASan lit-style output test make sure you've builr Clang and run:
{{{
# Make sure clang and llvm tools are in your PATH.
export PATH="/path/to/llvm_cmake_build/bin:$PATH"
# Run a specific output test.
llvm-lit /path/to/llvm/checkout/projects/compiler-rt/lib/asan/lit_tests/deep_tail_call.cc
}}}
  * To build ASan static runtime libraries:
{{{
cd projects/compiler-rt/lib/asan
# On Linux:
make -j12 clang_rt.asan-x86_64 clang_rt.asan-i386
# On Mac:
make -j12 clang_rt.asan_osx
make -j12 clang_rt.asan_osx_dynamic # optional
# The runtime libraries are built at:
# llvm_cmake_build/lib/clang/3.2/lib/{linux,darwin}/
}}}