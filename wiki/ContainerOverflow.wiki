#summary Container Overflow bugs

One kind of bugs that AddressSanitizer can find with the help of code annotations is, as we call it, "container-overflow".
Simplest example: 
{{{
#include <vector>
#include <assert.h>
typedef long T;
int main() {
  std::vector<T> v;
  v.push_back(0);
  v.push_back(1);
  v.push_back(2);
  assert(v.capacity() >= 4);
  assert(v.size() == 3);
  T *p = &v[0];
  // Here the memory is accessed inside a heap-allocated buffer
  // but outside of the region `[v.begin(), v.end())`.
  return p[3];  // OOPS.
  // v[3] could be detected by simple checks in std::vector.
  // *(v.begin()+3) could be detected by a mighty debug iterator
  // (&v[0])[3] can only be detected with AddressSanitizer or similar.
}
}}}

[http://lists.cs.uiuc.edu/pipermail/cfe-dev/2013-November/033649.html Work is in progress] to annotate containers in LLVM's libc++.