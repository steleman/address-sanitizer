#summary Runtime and compiler flags

=Compiler flags=
|| flag|| default || description ||
|| -fsanitize=address ||  || Enable AddressSanitizer ||
|| -fno-omit-frame-pointer || || Leave frame pointers. Allows the fast unwinder to function properly. ||
|| -fsanitize-blacklist=path || || Pass a [#Turning_off_instrumentation blacklist file] ||
|| -fno-common || || Do not treat global variable in C as common variables (allows ASan to instrument them) ||
|| -f(no-)sanitize-address-zero-base-shadow || no || Enable ZeroBasedShadow for ~ 5% extra performance. Requires -pie, Linux-only. || 

ASan-specific compile-time flags are passed via clang flag `-mllvm <flag>`. In most cases you don't need them.
|| flag|| default || description ||
|| -asan-stack   || 1 || Detect overflow/underflow for stack objects ||
|| -asan-globals || 1 || Detect overflow/underflow for global objects ||

=Run-time flags=

Most run-time flags are passed to AddressSanitizer via `ASAN_OPTIONS` environment variable like this: 
{{{
ASAN_OPTIONS=verbosity=1:malloc_context_size=20 ./a.out
}}}

|| flag|| default || description ||
|| verbosity  || 0 || Be more verbose (mostly for testing the tool itself) ||
|| malloc_context_size || 30 || Number of frames in `malloc`/`free` stack traces. Valid values are 0...256.  ||
|| redzone || 16 || Size of the minimal redzone. Since LLVM 3.3 asan uses adaptive redzones for heap, i.e. for large heap allocations the redzones are larger. ||
|| log_path|| (none) || Path to the log files. If log_path=PATH is given, every process will write error reports to PATH.PID. By default all reports are written to stderr. ||
|| sleep_before_dying || 0 || Sleep for this number of seconds before exiting the process on failure. ||
|| quarantine_size || 256Mb || Size of quarantine (in bytes) for finding use-after-free errors. Lower values save memory but increase false negatives rate. ||
|| fast_unwind_on_fatal || 0 || Use fast unwinder when found a bug. The fast one relies on frame pointers, while slow one does not. See also CallStack ||
|| fast_unwind_on_malloc || 1 || Same as `fast_unwind_on_fatal`, but control unwinding inside `malloc`/`free`, i.e. performance critical. See also CallStack ||
|| exitcode || 1 || Call `_exit(exitcode)` on error.  ||
|| abort_on_error || 0 || If `1`, call `abort()` instead of `_exit(exitcode)` on error.||
|| allow_user_poisoning  || 1 || Allow/disallow ManualPoisoning || 
|| strict_memcmp || 1 || When set to `1` (default), `memcmp("foo", "bar", 100)` is treated as a bug ||
|| alloc_dealloc_mismatch || 1 || When set to `1`, checks for malloc()/new/new[] vs. free()/delete/delete[] mismatches. Default: 0 on Mac and Windows, 1 otherwise ||
|| detect_stack_use_after_return || 0 || If 1, will try to detect UseAfterReturn errors ||
|| min_uar_stack_size_log || 16 || Controls the size of Fake Stack for UseAfterReturn detector ||
|| min_uar_stack_size_log || 20 || Controls the size of Fake Stack for UseAfterReturn detector ||
|| disable_core || 0/1 || Disable the core dumper. Since asan consumes many terabytes of virtual memory on 64-bit, dumping core is unwise. Default: 0 on 32-bit and 1 on 64-bit. ||
|| handle_segv || 1 || When set to 1, AddressSanitizer installs its own handler for SIGSEGV ||
|| allow_user_segv_handler || 0 || When set to 1, allows user to override SIGSEGV handler installed by ASan ||
|| check_initialization_order || 0 || When set to 1, detect existing [ExampleInitOrderFiasco InitOrderFiasco] problems. ||
|| strict_init_order || 0 || When set to 1, [ExampleInitOrderFiasco InitOrderFiasco] also finds potential init order problems. ||
|| strip_path_prefix || "" || When `strip_path_prefix=PREFIX` the substring `.*PREFIX` will be removed from the reported file names. ||
|| detect_leaks || 1 || If 1, enables memory leak detection. See LeakSanitizer (Linux-only). ||
|| use_sigaltstack || 1 || If 1, `sigaltstack` is called at start up time. This will provide verbose reports in case of stack overflow.  ||
|| color || auto || Print reports in color. Possible values: auto|always|never. By default, color is enabled if printing to terminal. ||
|| coverage || 0 || Enables coverage collection. See AsanCoverage. ||
|| coverage_dir || ./ || Controls the path at which coverage is saved. ||
|| coverage_direct || 0 || Enables writing coverage directly to a memory-mapped file (compared to once at the end of the program). See AsanCoverage. ||
|| detect_odr_violation || 2 || If > 0, detect [OneDefinitionRuleViolation ODR Violations] ||