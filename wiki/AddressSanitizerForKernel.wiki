#summary AddressSanitizer for Linux kernel.

= Overview =

Currently the kernel has the following configs:

CONFIG_DEBUG_SLAB
 * Enables red-zoning and poisoning
 * Can detect some out-of-bounds (OOB) accesses and use-after-free (UAF)
 * Does not detect OOB reads
 * Best-effort UAF detection

CONFIG_KMEMCHECK - heavy-handed uninitialized memory access checker
 * Causes page-fault on every memory access
 * Slow

CONFIG_DEBUG_PAGEALLOC
 * Unmaps freed pages from address space
 * Can detect some UAF accesses
 * Detects UAF only when the whole page is unused

We are going to implement:

CONFIG_ASAN
 * Fast and comprehensive solution for UAF and OOB
 * Based on compiler instrumentation (fast)
 * OOB for both writes and reads
 * Strong UAF detection
 * Prompt detection of bad memory accesses
 * Informative reports

= Details =

Pre-alpha repository: https://github.com/xairy/linux

The description of the ASan algorithm for user-space applications can be found [https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerAlgorithm here].
In kernel-space we are tracking only the part of the virtual address space, that is directly mapped to the physical memory (0xffff880000000000 - 0xffffc7ffffffffff).

= Trophies =

 * http://patchwork.ozlabs.org/patch/264733/