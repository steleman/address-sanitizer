#summary AddressSanitizer for Linux kernel.

= Overview =

A dynamic memory error detector for Linux kernel.
Currently works only on x86_64, supports only SLAB allocator.

AddressSanitizer:
 * Is based on compiler instrumentation (fast)
 * Detects OOB for both writes and reads
 * Provides strong UAF detection (based on delayed memory reuse)
 * Does prompt detection of bad memory accesses
 * Prints informative reports

= Details =

Pre-alpha repository: https://github.com/xairy/linux

More documentation: https://github.com/xairy/linux/blob/asan/Documentation/asan.txt

== Reports ==

To simplify reading the reports you can use our [https://code.google.com/p/address-sanitizer/source/browse/trunk/tools/kasan_symbolize.py symbolizer script]:
{{{
$ cat ./report
...
[    0.359730]   #0 ffffffff810d1964 (asan_slab_free+0x74/0xe0)
[    0.360016]   #1 ffffffff81262a3a (kfree+0x9a/0x240)
...
}}}
{{{
$ cat ./report | ./kasan_symbolize.py ./vmlinux
...
  #0 ffffffff810d1964 (asan_slab_free+0x74/0xe0) ./arch/x86/mm/asan/asan.c:134
  #1      inlined     (kfree+0x9a/0x240) virt_to_head_page ./include/linux/mm.h:420
  #1      inlined     (kfree+0x9a/0x240) virt_to_slab ./mm/slab.c:462
  #1      inlined     (kfree+0x9a/0x240) cache_free_alien ./mm/slab.c:1103
  #1      inlined     (kfree+0x9a/0x240) __cache_free ./mm/slab.c:3606
  #1 ffffffff81262a3a (kfree+0x9a/0x240) ./mm/slab.c:3830
...
}}}

== Algorithm ==

The description of the ASan algorithm for user-space applications can be found [https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerAlgorithm here].
In kernel-space we are tracking only the part of the virtual address space, which is directly mapped to the physical memory (0xffff880000000000 - 0xffffc7ffffffffff).

== Mapping ==

{{{
Shadow = ((Mem - PAGE_OFFSET) >> 3) + PAGE_OFFSET + SHADOW_OFFSET;
}}}
where:
{{{
PAGE_OFFSET   = 0xffff880000000000
SHADOW_OFFSET = 0x0000000036400600
}}}

== Instrumentation ==

To instrument the kernel you need to use a custom GCC, which you can download [https://address-sanitizer.googlecode.com/files/gcc-r203101-snapshot.tar.gz here].

You need to set GCC path in the wrapper script linux/gcc.py:
{{{
gcc = '$GCC_KASAN/install/bin/gcc'
}}}

The kernel Makefile is changed so when you start building the kernel it will automatically use the wrapper script.

If you would like to build GCC yourself read the instructions below.

Checkout GCC:
{{{
svn checkout -r 203101 svn://gcc.gnu.org/svn/gcc/trunk $GCC_KASAN
}}}

Apply [https://address-sanitizer.googlecode.com/files/gcc-r203101-kasan.patch this patch] to GCC:
{{{
cd $GCC_KASAN
patch -p0 -i gcc-r203101-kasan.patch
}}}

Install GCC prerequisites:
{{{
sudo apt-get install flex bison libc6-dev libc6-dev-i386 libgmp3-dev libmpfr-dev libmpc-dev
}}}

Build GCC:
{{{
cd $GCC_KASAN
mkdir build
mkdir install
cd build
../configure --enable-languages=c,c++ --disable-bootstrap --enable-checking=no --with-gnu-as --with-gnu-ld --with-ld=/usr/bin/ld.bfd --prefix=$GCC_KASAN/install
make
make install
}}}

= Trophies =

*Fixed:*
 * Out-of-bounds read in net/ipv4:
http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=aab515d7c32a34300312416c50314e755ea6f765
 * Out-of-bounds in get_wchan (arch/x86/kernel/process_64.c):
http://www.lkml.org/lkml/2013/9/3/286
 * Out-of-bounds in sd_revalidate_disk (drivers/scsi/sd.c):
http://www.spinics.net/lists/linux-scsi/msg68519.html

http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=984f1733fcee3fbc78d47e26c5096921c5d9946a

 * Use-after-free in aio_migratepage:
Sent to  linux-aio mainling list, not visible on web.

https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernelReports

http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5e9ae2e5da0beb93f8557fc92a8f4fbc05ea448f

 * Out-of-bounds in ip6_finish_output2:
http://www.spinics.net/lists/netdev/msg250734.html

http://seclists.org/oss-sec/2013/q3/683

http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2811ebac2521ceac84f2bdae402455baa6a7fb47

  * Out-of-bounds in ftrace_regex_release (kernel/trace/ftrace.c):
http://www.spinics.net/lists/kernel/msg1612400.html

*Confirmed:*

 * Out-of-bounds read in __d_lookup_rcu (fs/dcache.c):
https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernelReports

http://lkml.org/lkml/2013/10/3/493

*Not confirmed:*
 * Use-after-free in drivers/net/ethernet/intel/e1000:
http://permalink.gmane.org/gmane.linux.drivers.e1000.devel/12441
 * Use-after-free in ____call_usermodehelper (kernel/kmod.c):
http://www.lkml.org/lkml/2013/8/21/431
 * Use-after-free in ext4_mb_new_blocks:
http://permalink.gmane.org/gmane.comp.file-systems.ext4/40353
 * Use-after-free in SyS_remap_file_pages:
https://lkml.org/lkml/2013/9/17/30
  * Use-after-free in ata_qc_issue (drivers/ata/libata-core.c):
http://www.spinics.net/lists/linux-ide/msg46213.html