#summary AddressSanitizer for Linux kernel.

= Overview =

A dynamic memory error detector for Linux kernel.
Currently works only on x86_64, supports only SLAB allocator.

AddressSanitizer for Linux kernel:
 * Is based on compiler instrumentation (fast)
 * Detects OOB for both writes and reads
 * Provides strong UAF detection (based on delayed memory reuse)
 * Does prompt detection of bad memory accesses
 * Prints informative reports

= Details =

Pre-alpha repository: https://github.com/google/kasan/tree/kasan

More extensive documentation: https://github.com/google/kasan/blob/kasan/Documentation/kasan.txt

== Reports ==

To simplify reading the reports you can use our [https://code.google.com/p/address-sanitizer/source/browse/trunk/tools/kasan_symbolize.py symbolizer script]:
{{{
$ cat report
...
[  107.327411]  [<ffffffff8110424c>] call_usermodehelper_freeinfo+0x2c/0x30
[  107.328668]  [<ffffffff811049d5>] call_usermodehelper_exec+0xa5/0x1c0
[  107.329816]  [<ffffffff811052b0>] call_usermodehelper+0x40/0x60
[  107.330987]  [<ffffffff8146c15e>] kobject_uevent_env+0x5ee/0x620
[  107.332035]  [<ffffffff8146c19b>] kobject_uevent+0xb/0x10
[  107.333108]  [<ffffffff8173bd7f>] net_rx_queue_update_kobjects+0xaf/0x150
...
}}}
{{{
$ cat report | ./kasan_symbolize.py path/to/kernel/
...
 [<ffffffff8110424c>] call_usermodehelper_freeinfo+0x2c/0x30 ./kernel/kmod.c:265
 [<ffffffff811049d5>] call_usermodehelper_exec+0xa5/0x1c0 ./kernel/kmod.c:612
 [<ffffffff811052b0>] call_usermodehelper+0x40/0x60 ./kernel/kmod.c:642
 [<ffffffff8146c15e>] kobject_uevent_env+0x5ee/0x620 ./lib/kobject_uevent.c:311
 [<ffffffff8146c19b>] kobject_uevent+0xb/0x10 ./lib/kobject_uevent.c:333
 [<     inlined    >] net_rx_queue_update_kobjects+0xaf/0x150 rx_queue_add_kobject ./net/core/net-sysfs.c:771
 [<ffffffff8173bd7f>] net_rx_queue_update_kobjects+0xaf/0x150 ./net/core/net-sysfs.c:786
...
}}}

== Instrumentation ==

NB: These steps are also can be reproduced using dedicated vagrant VM: KasanOnVagrant.

To instrument the kernel you need to use a reasonably fresh GCC (4.9.2+).

You may need to set GCC path in the make command line:
{{{
make CC='$GCC_KASAN/bin/gcc'
}}}

You will also need to enable SLAB allocator (General setup > Choose SLAB allocator) and AddressSanitizer (Kernel hacking > Memory Debugging) during kernel configuration.

= Trophies =

*Fixed:*
 * Out-of-bounds read in net/ipv4:
http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=aab515d7c32a34300312416c50314e755ea6f765

 * Out-of-bounds in sd_revalidate_disk (drivers/scsi/sd.c):
http://www.spinics.net/lists/linux-scsi/msg68519.html

http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=984f1733fcee3fbc78d47e26c5096921c5d9946a

 * Use-after-free in aio_migratepage:
Sent to  linux-aio mainling list, not visible on web.

https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernelReports

http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5e9ae2e5da0beb93f8557fc92a8f4fbc05ea448f

 * Out-of-bounds in ip6_finish_output2:
http://www.spinics.net/lists/netdev/msg250734.html

http://seclists.org/oss-sec/2013/q3/683

http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2811ebac2521ceac84f2bdae402455baa6a7fb47

http://www.spinics.net/lists/netdev/msg282080.html

  * Out-of-bounds in ftrace_regex_release (kernel/trace/ftrace.c):
http://www.spinics.net/lists/kernel/msg1612400.html

https://lkml.org/lkml/2013/10/20/126

 * Use-after-free in ext4_mb_new_blocks:

http://permalink.gmane.org/gmane.comp.file-systems.ext4/40353

http://permalink.gmane.org/gmane.comp.file-systems.ext4/41108

 * Race (use-after-free) in ip4_datagram_release_cb:
http://www.spinics.net/lists/netdev/msg285419.html

http://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/commit/?id=9709674e68646cee5a24e3000b3558d25412203a

*Confirmed:*

 * Use-after-free in __put_anon_vma:
https://lkml.org/lkml/2014/6/6/186

 * Out-of-bounds read in __d_lookup_rcu (fs/dcache.c):
https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernelReports

http://lkml.org/lkml/2013/10/3/493

 * Out-of-bounds in get_wchan (arch/x86/kernel/process_64.c):
http://lkml.org/lkml/2013/9/3/286

 * Stack-out-of-bounds in idr_for_each
https://lkml.org/lkml/2014/6/23/516

 * Out-of-bounds memory write in fs/ecryptfs/crypto.c
https://lkml.org/lkml/2014/11/21/230


*Not confirmed:*
 * Use-after-free in drivers/net/ethernet/intel/e1000:
http://permalink.gmane.org/gmane.linux.drivers.e1000.devel/12441
 * Use-after-free in ____call_usermodehelper (kernel/kmod.c):
http://www.lkml.org/lkml/2013/8/21/431
 * Use-after-free in SyS_remap_file_pages:
https://lkml.org/lkml/2013/9/17/30
  * Use-after-free in ata_qc_issue (drivers/ata/libata-core.c):
http://www.spinics.net/lists/linux-ide/msg46213.html
  * Racy use-after-free in list_del_event
https://lkml.org/lkml/2014/6/18/318

[https://www.google.com/?gws_rd=ssl#q=site%3Alkml.org+%22Memory+state+around+the+buggy+address%22+%22Sasha+Levin%22 Bugs found by external users]